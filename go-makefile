#!/usr/bin/env python3
# The MIT License (MIT)

# Copyright Â© 2015 Dmitry Moskowski

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
from argparse import ArgumentParser
import sys


def format(ctx):
    resolved_ctx = ctx.copy()
    resolved_ctx.update(docker(ctx))

    return TEMPLATE.format(**resolved_ctx)

def go_get(package, commands=[]):
    all_commands = ["go get {0}".format(package)] + commands
    return """if [ ! -e "$(GOPATH)"/src/"{0}" ]; then {1}; fi""".format(
        package,
        " && ".join(all_commands)
    )

def docker(ctx):
    if ctx["docker"]:
        return {
            "docker_variables": "\n".join(
                [
                    "docker          := {docker_command}",
                    "build_container := {user}/$(project)/build",
                    "docker_run      := $(docker) run  \\",
                    "	-v $(GOPATH):/go          \\",
                    "	-it",
                    ""
                ]
            ).format(**ctx),
            "docker_targets": "\n".join(
                [
                    ".PHONY: build-in-docker",
                    "build-in-docker:",
                    "	$(docker_run) $(build_container) make -C /go/src/$(package) build",
                    ""
                ]
            ).format(**ctx)
        }
    return {
        "docker_variables": "",
        "docker_targets": ""
    }


TEMPLATE = """.DEFAULT_GOAL  = all
NAME           = {name}
PACKAGE        = {host}/{user}/$(NAME)
NUMCPUS        = $(shell cat /proc/cpuinfo | grep '^processor\s*:' | wc -l)
VERSION        = $(shell git rev-list --count HEAD).$(shell git rev-parse --short HEAD)
LDFLAGS        = -X $(PACKAGE)/cmd.version=$(VERSION) \\
                 -B 0x$(shell dd if=/dev/urandom bs=40 count=1 | sha1sum | awk '{{print $$1}}')

{docker_variables}
.PHONY: all
all: tools

.PHONY: $(NAME)
$(NAME):
	govendor remove +u
	govendor add +e
	govendor sync
	mkdir -p build
	go build -a -ldflags "$(LDFLAGS)" -v \\
		-o build/$(NAME)             \\
		$(PACKAGE)/$(NAME)

.PHONY: build
build: $(NAME)

{docker_targets}
.PHONY: test
test: tools
	go test -v ./...

.PHONY: bench
bench: tools
	go test -bench=. -v ./...

.PHONY: lint
lint: tools
	go vet ./...
	gometalinter                     \\
		--deadline=5m            \\
		--concurrency=$(NUMCPUS) \\
		--exclude="(^|/)vendor/" \\
		./...

.PHONY: check
check: lint test

.PHON: tools
tools:
	""" + go_get("github.com/kardianos/govendor") + """
	""" + go_get("github.com/rogpeppe/godef") + """
	""" + go_get("github.com/nsf/gocode") + """
	""" + go_get("github.com/stretchr/testify/assert") + """
	""" + go_get("github.com/alecthomas/gometalinter", ["gometalinter --install"]) + """
"""

if __name__ == "__main__":
    a = ArgumentParser()
    a.add_argument(
        "--name",
        help="project name to hardcode into the Makefile",
        required=True
    )
    a.add_argument(
        "--host",
        help="host to hardcode as part of the package url",
        default="github.com"
    )
    a.add_argument(
        "--user",
        help="user to hardcode into the package name as part of url",
        required=True
    )
    a.add_argument(
        "--docker",
        help="include docker support into Makefile",
        action="store_true"
    )
    a.add_argument(
        "--docker-command",
        help="docker command line to use in Makefile",
        default="sudo docker"
    )
    sys.stdout.write(
        format(
            a.parse_args().__dict__
        )
    )
