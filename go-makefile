#! /usr/bin/env python
from argparse import ArgumentParser
from functools import reduce
from json import load as json_unmarshal, dump as json_marshal
from os.path import expanduser, abspath
import sys

package_kind     = "package"
application_kind = "application"
kinds = [
    package_kind,
    application_kind,
]

# Package Makefile parts

package_variables = """
name     := {name}
package  := {host}/{user}/$(name)

# XXX: Fuck you golang!
# 99% of time having vendor in a wildcard result is not what you want!
packages := $(shell go list ./... | grep -v /vendor/)
"""

package_targets = """
.PHONY: test
test:: dependencies
	go test -v $(packages)

.PHONY: bench
bench:: dependencies
	go test -bench=. -v $(packages)

.PHONY: lint
lint:: dependencies
	go vet -v $(packages)

.PHONY: check
check:: lint test
"""

# Application Makefile parts
# Each application is a package
# (it will include package_variables + package_targets)

application_variables = """
build       := ./build
build_id    := {build_id_generator}
ldflags     := -X $(package)/{version_variable}=$(version) -B $(build_id)
build_flags := -a -ldflags "$(ldflags)" -o build/$(name)
"""

application_targets = """
.PHONY: all
all:: $(name)

.PHONY: $(name)
$(name)::
	mkdir -p $(build)
	@echo "Build id: $(build_id)"
	go build $(build_flags) -v $(package)/$(name)

.PHONY: build
build:: $(name)
"""

include = "include {0}"

makefile = """
.DEFAULT_GOAL = all

numcpus  := $(shell cat /proc/cpuinfo | grep '^processor\s*:' | wc -l)
version  := {version_generator}
{package_variables}
{application_variables}

.PHONY: all
all:: dependencies

.PHONY: dependencies
dependencies::
	dep ensure

{package_targets}

{application_targets}

.PHONY: clean
clean::
	git clean -xddff
"""

def indented(l, level=1, prefix="\t", suffix="\n"):
    return (prefix*level).join(
        [v+suffix for v in l]
    )

def format(ctx):
    nctx = ctx.copy()
    package = {
        "package_variables": "",
        "package_targets": "",
    }
    if nctx["kind"] == package_kind or nctx["kind"] == application_kind:
        package["package_variables"] = package_variables.format(**nctx).rstrip()
        package["package_targets"]   = package_targets.format(**nctx).rstrip()

    application = {
        "application_variables": "",
        "application_targets": "",
    }
    if nctx["kind"] == application_kind:
        application["application_variables"] = application_variables.format(**nctx).rstrip()
        application["application_targets"]   = application_targets.format(**nctx).rstrip()

    nctx.update(package)
    nctx.update(application)

    return "\n".join(
        reduce(
            # Eliminate two or more empty lines in output
            lambda acc, v: acc+([v] if len(acc) == 0 or acc[-1] != v else []),
            (makefile.format(**nctx).rstrip() + "\n").split("\n"),
            []
        ) + [
            include.format(v)
            for v in nctx["include"]
        ]
    ).strip() + "\n"

def go_get(package, predicate, commands=[]):
    all_commands = [
        "go get {0}".format(package)
    ] + commands

    return """@if [ {predicate} ]; then {commands}; fi""".format(
        predicate=predicate,
        commands=" && ".join(all_commands)
    )

def main(args):
    sys.stdout.write(
        format(
            args
        )
    )
    if args["write_config"]:
        nargs = args.copy()
        p = abspath(
            expanduser(
                nargs["write_config"]
            )
        )
        del nargs["write_config"]
        del nargs["read_config"]

        with open(p, "w") as stream:
            json_marshal(
                nargs,
                stream,
                indent=4,
                sort_keys=True,
                ensure_ascii=False
            )
            stream.write("\n")


if __name__ == "__main__":
    def has_prefix(v, prefix):
        return v == prefix or v.startswith(prefix or "")

    def match(full, part):
        vs = [
            v
            for v in full
            if has_prefix(v, part)
        ]
        if len(vs) == 0:
            return part
        if len(vs) > 1:
            raise RuntimeError(
                "Ambiguous name '{}', did you mean one of these? {}".format(
                    part,
                    vs
                )
            )
        return vs[0]

    def check(args):
        if args["kind"] not in kinds:
            raise KeyError(
                "Unsupported kind '{}', supported kinds are: {}".format(
                    args["kind"],
                    kinds
                )
            )
        return args

    def normalize(args):
        nargs = args.copy()
        nargs["kind"] = match(
            kinds,
            args["kind"].lower().strip(),
        )
        return nargs

    def validate(args):
        if not args.get("kind", None):
            raise KeyError("You should specify a kind of your project")
        if args["name"] == "":
            raise KeyError("You should specify name of the project")
        if args["user"] == "":
            raise KeyError("You should specify user name to generate repository url")
        return args

    def configure(args):
        if not args["read_config"]:
            return args

        p = abspath(expanduser(args["read_config"]))
        with open(p, "r") as stream:
            nargs = args.copy()
            nargs.update(
                **json_unmarshal(stream)
            )
            return nargs

    p = ArgumentParser()
    p.add_argument(
        "--kind",
        help="Kind of Makefile to generate, should be on of: {}".format(kinds)
    )
    p.add_argument(
        "--name",
        help="Project name to hardcode into the Makefile"
    )
    p.add_argument(
        "--host",
        help="Host to hardcode as part of the package url",
        default="github.com"
    )
    p.add_argument(
        "--user",
        help="User to hardcode into the package name as part of url"
    )
    p.add_argument(
        "--include",
        help="List of other Makefile to include",
        nargs="+",
        default=[]
    )

    #

    p.add_argument(
        "--version-variable",
        help="Version variable name inside your application package",
        default="cli.version"
    )
    p.add_argument(
        "--version-generator",
        help="Version generator code in Make",
        default="$(shell git rev-list --count HEAD).$(shell git rev-parse --short HEAD)"
    )
    p.add_argument(
        "--build-id-generator",
        help="Build ID generator code in Make",
        default="0x$(shell echo $(version) | sha1sum | awk '{print $$1}')"
    )

    #

    p.add_argument(
        "--read-config",
        help="Read configuration from specified file"
    )
    p.add_argument(
        "--write-config",
        help="Write configuration to specified file"
    )

    main(
        check(
            normalize(
                validate(
                    configure(
                        p.parse_args().__dict__
                    )
                )
            )
        )
    )
