#!/usr/bin/env python3
# The MIT License (MIT)

# Copyright Â© 2015 Dmitry Moskowski

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
from argparse import ArgumentParser
from os.path import basename
import sys

def format(ctx):
    return TEMPLATE.format(**ctx)

def go_get(package, commands=[]):
    all_commands = ["go get {0}".format(package)] + commands
    return """@if [ ! -e "$(GOPATH)"/src/"{0}" ]; then {1}; fi""".format(
        package,
        " && ".join(all_commands)
    )

def go_get_bin(package, commands=[]):
    all_commands = ["go get {0}".format(package)] + commands
    return """@if [ ! -e "$(GOPATH)"/bin/"{0}" ]; then {1}; fi""".format(
        basename(package),
        " && ".join(all_commands)
    )

TEMPLATE = """.DEFAULT_GOAL  = all

name     := {name}
package  := {host}/{user}/$(name)
build    := ./build
numcpus  := $(shell cat /proc/cpuinfo | grep '^processor\s*:' | wc -l)
version  := $(shell git rev-list --count HEAD).$(shell git rev-parse --short HEAD)
build_id := 0x$(shell dd if=/dev/urandom bs=40 count=1 2> /dev/null | sha1sum | awk '{{print $$1}}')
ldflags  := -X $(package)/cli.version=$(version) \\
            -B $(build_id)

.PHONY: all
all: dependencies

.PHONY: $(name)
$(NAME): dependencies
	mkdir -p $(build)
	@echo "Build id: $(build_id)"
	go build -a -ldflags "$(ldflags)" -v \\
                 -o build/$(name)            \\
                 $(package)/$(name)

.PHONY: build
build: $(name)

.PHONY: test
test: tools
	go test -v \\
           $(shell glide novendor)

.PHONY: bench
bench: tools
	go test        \\
           -bench=. -v \\
           $(shell glide novendor)

.PHONY: lint
lint: tools
	go vet $(shell glide novendor)
	gometalinter                     \\
		--deadline=5m            \\
		--concurrency=$(numcpus) \\
		$(shell glide novendor)

.PHONY: check
check: lint test

.PHONY: tools
tools:
	""" + go_get_bin("github.com/Masterminds/glide") + """
	""" + go_get_bin("github.com/rogpeppe/godef") + """
	""" + go_get_bin("github.com/nsf/gocode") + """
	""" + go_get_bin("github.com/alecthomas/gometalinter", ["gometalinter --install"]) + """
	""" + go_get("github.com/stretchr/testify/assert") + """

.PHONY: dependencies
dependencies: tools
	glide install

.PHONY: clean
clean:
	rm -rf $(build)
	glide cache-clear
"""

if __name__ == "__main__":
    a = ArgumentParser()
    a.add_argument(
        "--name",
        help="Project name to hardcode into the Makefile",
        required=True
    )
    a.add_argument(
        "--host",
        help="Host to hardcode as part of the package url",
        default="github.com"
    )
    a.add_argument(
        "--user",
        help="User to hardcode into the package name as part of url",
        required=True
    )
    sys.stdout.write(
        format(
            a.parse_args().__dict__
        )
    )
